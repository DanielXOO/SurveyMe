// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SurveyMe.Data;

#nullable disable

namespace SurveyMe.Data.Migrations
{
    [DbContext(typeof(SurveyMeDbContext))]
    [Migration("20220519073126_Add-Initial")]
    partial class AddInitial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.Property<Guid>("RolesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UsersId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RolesId", "UsersId");

                    b.HasIndex("UsersId");

                    b.ToTable("RoleUser");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.BaseAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("QuestionType")
                        .HasColumnType("int");

                    b.Property<Guid>("SurveyAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.HasIndex("SurveyAnswerId");

                    b.ToTable("BaseAnswer");

                    b.HasDiscriminator<int>("QuestionType");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.OptionAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CheckboxAnswerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CheckboxAnswerId");

                    b.ToTable("OptionAnswer");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.SurveyAnswer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.HasIndex("UserId");

                    b.ToTable("SurveyAnswer");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Questions.Question", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SurveyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SurveyId");

                    b.ToTable("Question");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Questions.QuestionOption", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("QuestionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("QuestionOption");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Roles.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Surveys.Survey", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("LastChangeDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.ToTable("Survey");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Users.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.CheckboxAnswer", b =>
                {
                    b.HasBaseType("SurveyMe.DomainModels.Answers.BaseAnswer");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.FileAnswer", b =>
                {
                    b.HasBaseType("SurveyMe.DomainModels.Answers.BaseAnswer");

                    b.Property<string>("ContentType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.RadioAnswer", b =>
                {
                    b.HasBaseType("SurveyMe.DomainModels.Answers.BaseAnswer");

                    b.Property<Guid>("OptionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.RateAnswer", b =>
                {
                    b.HasBaseType("SurveyMe.DomainModels.Answers.BaseAnswer");

                    b.Property<double>("Rate")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.ScaleAnswer", b =>
                {
                    b.HasBaseType("SurveyMe.DomainModels.Answers.BaseAnswer");

                    b.Property<double>("Scale")
                        .HasColumnType("float");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.TextAnswer", b =>
                {
                    b.HasBaseType("SurveyMe.DomainModels.Answers.BaseAnswer");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("RoleUser", b =>
                {
                    b.HasOne("SurveyMe.DomainModels.Roles.Role", null)
                        .WithMany()
                        .HasForeignKey("RolesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SurveyMe.DomainModels.Users.User", null)
                        .WithMany()
                        .HasForeignKey("UsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.BaseAnswer", b =>
                {
                    b.HasOne("SurveyMe.DomainModels.Questions.Question", "Question")
                        .WithMany("Answers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("SurveyMe.DomainModels.Answers.SurveyAnswer", "SurveyAnswer")
                        .WithMany("QuestionAnswers")
                        .HasForeignKey("SurveyAnswerId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");

                    b.Navigation("SurveyAnswer");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.OptionAnswer", b =>
                {
                    b.HasOne("SurveyMe.DomainModels.Answers.CheckboxAnswer", "CheckboxAnswer")
                        .WithMany("Options")
                        .HasForeignKey("CheckboxAnswerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CheckboxAnswer");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.SurveyAnswer", b =>
                {
                    b.HasOne("SurveyMe.DomainModels.Surveys.Survey", null)
                        .WithMany("Answers")
                        .HasForeignKey("SurveyId");

                    b.HasOne("SurveyMe.DomainModels.Users.User", "User")
                        .WithMany("Answers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Questions.Question", b =>
                {
                    b.HasOne("SurveyMe.DomainModels.Surveys.Survey", "Survey")
                        .WithMany("Questions")
                        .HasForeignKey("SurveyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Survey");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Questions.QuestionOption", b =>
                {
                    b.HasOne("SurveyMe.DomainModels.Questions.Question", "Question")
                        .WithMany("Options")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Surveys.Survey", b =>
                {
                    b.HasOne("SurveyMe.DomainModels.Users.User", "Author")
                        .WithMany("Surveys")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.SurveyAnswer", b =>
                {
                    b.Navigation("QuestionAnswers");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Questions.Question", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Options");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Surveys.Survey", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Questions");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Users.User", b =>
                {
                    b.Navigation("Answers");

                    b.Navigation("Surveys");
                });

            modelBuilder.Entity("SurveyMe.DomainModels.Answers.CheckboxAnswer", b =>
                {
                    b.Navigation("Options");
                });
#pragma warning restore 612, 618
        }
    }
}
